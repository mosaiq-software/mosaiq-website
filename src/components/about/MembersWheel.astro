---
import Icon from '../Icon.astro';
import SectionHeaderTitle from '../SectionHeaderTitle.astro';
import TextBubble from './TextBubble.astro';
import TextBubbleWrap from './TextBubbleWrap.astro';
import members from '../../data/members.json' assert { type: 'json' };
import Floaty from '../Floaty.astro';
import type { TeamMember } from '../../scripts/types';

const team: TeamMember[] = members.sort((a, b) => new Date(b.since).getTime() - new Date(a.since).getTime());

const getImageBoxShadow = () => {
    // box-shadow: 10px 10px 0px rgba(0, 0, 0, 1);
    const colors = ['pink', 'magenta', 'purple', 'blue', 'navy'];
    let x = Math.floor(Math.random() * 10) + 5;
    if (Math.random() < 0.5) {
        x = -x;
    }
    const color = colors[Math.floor(Math.random() * colors.length)];
    return `${x}px ${x}px 0px var(--mosaiq-${color})`;
};
---

<div class="members">
    <SectionHeaderTitle outlined>Who?</SectionHeaderTitle>
    <div class="headshot-wheel">
        <div class="circle"></div>
        {
            team.map((member, i) => (
                <div class="headshot-wrapper">
                    <Floaty
                        speed={1}
                        radius={10}
                        pathComplexity={8}
                    >
                        <img
                            src={member.img}
                            aria-hidden="true"
                            class="headshot"
                            draggable="false"
                            style={`box-shadow: ${getImageBoxShadow()}`}
                        />
                    </Floaty>
                    <div class="headshot-text">
                        <h3 class="name">{member.name}</h3>
                        <p class="role">{member.role}</p>
                        {member.website ? (
                            <a
                                href={member.website}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="website-link"
                                aria-label={`Visit ${member.name}'s website`}
                            >
                                <Icon
                                    name={'external-link'}
                                    size={16}
                                />
                            </a>
                        ) : null}
                    </div>
                </div>
            ))
        }
    </div>
    <TextBubbleWrap
        vAlign="bottom"
        centered
    >
        <TextBubble>
            <p>All of these wonderful people</p>
        </TextBubble>
    </TextBubbleWrap>
</div>
<script>
    import gsap from 'gsap';
    import ScrollTrigger from 'gsap/ScrollTrigger';

    gsap.registerPlugin(ScrollTrigger);

    if (ScrollTrigger.isTouch === 1) {
        ScrollTrigger.normalizeScroll({
            allowNestedScroll: true,
            type: 'touch,wheel,pointer',
        });
    }

    const headshotWrappers = document.querySelectorAll('.headshot-wrapper') as NodeListOf<HTMLDivElement>;
    const headshotWheel = document.querySelector('.headshot-wheel') as HTMLDivElement;

    const wheelCenter = {
        x: headshotWheel.clientWidth / 2,
        y: headshotWheel.clientHeight / 2,
    };

    // size and position the circle
    const radius = headshotWheel.clientWidth;
    const circle = headshotWheel.querySelector('.circle') as HTMLDivElement;
    circle.style.width = `${radius * 2}px`;
    circle.style.height = `${radius * 2}px`;
    circle.style.top = `${wheelCenter.y - radius}px`;
    circle.style.left = `${wheelCenter.x - radius}px`;

    // spread the headshots evenly around the circle
    const degreesPerHeadshot = 30;
    const totalScrollDegrees = degreesPerHeadshot * (headshotWrappers.length - 1);
    const degreesOffset = 270 - degreesPerHeadshot * headshotWrappers.length;

    headshotWrappers.forEach((wrapper, index) => {
        // position the headshot around the circle
        const angleDeg = degreesPerHeadshot * (index + 1) + degreesOffset;
        const angle = (angleDeg * Math.PI) / 180;
        const x = wheelCenter.x + radius * Math.cos(angle) - wrapper.clientWidth / 2;
        const y = wheelCenter.y + radius * Math.sin(angle) - wrapper.clientHeight / 2;
        wrapper.style.transform = `translate(${x}px, ${y}px)`;

        // rotate the headshot to face outward
        const rotation = (angle * 180) / Math.PI + 90;
        wrapper.style.transform += ` rotate(${rotation}deg)`;
    });

    ScrollTrigger.create({
        trigger: '.members',
        start: 'top top',
        end: `${headshotWrappers.length * 500}px top`,
        pin: true,
        pinSpacing: true,
        anticipatePin: 1,
        scrub: true,
        // make it turn the wheel
        onUpdate: (self) => {
            const progress = self.progress; // 0 to 1
            const rotation = totalScrollDegrees * progress;
            headshotWheel.style.transform = `rotate(${rotation}deg)`;
        },
    });
</script>
<style>
    .members {
        width: 100%;
        position: relative;
        user-select: none !important;
        min-height: 100vh;
        overflow-y: clip;

        .headshot-wheel {
            position: absolute;
            top: 900px;
            left: calc(-500px + 50%);
            width: 1000px;
            height: 1000px;
            user-select: none;

            .circle {
                position: absolute;
                border-radius: 50000px;
                border: double 0.5em transparent;
                background-image: linear-gradient(var(--color-background), var(--color-background)), linear-gradient(to right, var(--mosaiq-blue), var(--mosaiq-pink));
                background-origin: border-box;
                background-clip: content-box, border-box;
                pointer-events: none;
            }

            .headshot-wrapper {
                position: absolute;
                width: 300px;
                height: 500px;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                gap: 1rem;

                .headshot-text {
                    width: 100%;
                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;
                    align-items: center;
                    position: relative;

                    .name {
                        font-size: var(--font-size-md);
                    }
                    .role {
                        font-size: var(--font-size-sm);
                        color: var(--color-text-secondary);
                    }
                    .website-link {
                        position: absolute;
                        top: 4px;
                        right: 4px;
                        color: var(--color-text-secondary);
                    }
                }

                .headshot {
                    width: 300px;
                    height: 300px;
                    aspect-ratio: 1/1;
                    object-fit: cover;
                    user-select: none;
                }
            }
        }
    }
</style>
