---
interface Props {}
const props = Astro.props;
const colors = {
    s: '#2384ca',
    i: '#21286c',
    p: '#482362',
    m: '#932e76',
    k: '#d31757',
    t: 'transparent',
};

const logo = `ppptiiiitsss
ppptiiiitsss
ppptiiiitsss
tttttiiitttt
mmmmtttttiii
mmmmtpptiiii
mmmmtpptiiii
mmmtttttiiii
ttttmmmttttt
kkktmmmmtppp
kkktmmmmtppp
kkktmmmmtppp`;
---

<script>
    import { gsap } from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';
    import { MotionPathPlugin } from 'gsap/MotionPathPlugin';

    gsap.registerPlugin(ScrollTrigger, MotionPathPlugin);

    const logo = document.querySelector('.mosaiq-logo');
    if (!logo) throw new Error('No content element found');
    const cells = logo.querySelectorAll('.cell');
    const tl = gsap.timeline({});

    const projects = document.querySelectorAll('.project');
    // tl.fromTo(
    //     '.mosaiq-logo',
    //     {
    //         scale: 0,
    //         rotateZ: -45,
    //     },
    //     {
    //         scale: 1,
    //         rotate: '-34deg',
    //         rotateX: '43deg',
    //         skew: '8deg, -16deg',
    //     }
    // );
    tl.fromTo(
        '.mosaiq-logo',
        {
            scale: 1,
            transform: 'perspective(600px) rotateX(18deg) rotateY(-14deg) rotateZ(-32deg)',
        },
        {
            scrollTrigger: {
                trigger: document.body,
                start: 'top top',
                end: 'bottom bottom',
                scrub: 2,
            },
            transform: 'perspective(600px) rotateX(0deg) rotateY(0deg) rotateZ(-45deg)',
        }
    );
    // tl.to('.mosaiq-logo', {
    //     scrollTrigger: {
    //         trigger: document.body,
    //         start: 'top top',
    //         end: 'bottom bottom',
    //         scrub: 2,
    //     },
    //     motionPath: {
    //         path: [
    //             { x: 0, y: 0 },
    //             ...Array.from(projects).map((project) => {
    //                 const projectCoord = { x: 0, y: 0 };
    //                 const point = MotionPathPlugin.convertCoordinates(content, project, projectCoord);
    //                 console.log(point);
    //                 return { x: -point.x, y: -point.y };
    //             }),
    //         ],
    //     },
    //     ease: 'none',
    // });

    const cellInitialSpread = window.innerWidth;
    const cellFloatRange = 5;
    cells.forEach((cell, index) => {
        const cellTl = gsap.timeline({});

        cellTl.to(cell, {
            x: gsap.utils.random(-cellInitialSpread, cellInitialSpread),
            y: gsap.utils.random(-cellInitialSpread, cellInitialSpread),
            z: gsap.utils.random(-cellInitialSpread, cellInitialSpread),
            duration: 0,
            ease: 'none',
        });
        cellTl.to(cell, {
            x: gsap.utils.random(-cellFloatRange, cellFloatRange),
            y: gsap.utils.random(-cellFloatRange, cellFloatRange),
            z: gsap.utils.random(-cellFloatRange, cellFloatRange),
            duration: gsap.utils.random(2, 4),
            ease: 'elastic',
            yoyo: true,
        });
        cellTl.to(cell, {
            x: gsap.utils.random(-cellFloatRange, cellFloatRange),
            y: gsap.utils.random(-cellFloatRange, cellFloatRange),
            z: gsap.utils.random(-cellFloatRange, cellFloatRange),
            duration: gsap.utils.random(1.5, 3),
            ease: 'sine',
            repeat: -1,
            yoyo: true,
        });

        const parent = cell.parentElement;
        if (parent) {
            cellTl.to(parent, {
                scrollTrigger: {
                    trigger: document.body,
                    start: 'top top',
                    end: 'bottom bottom',
                    scrub: 2,
                },
                motionPath: {
                    path: [
                        { x: 0, y: 0 },
                        ...Array.from(projects).map((project) => {
                            const projectCoord = { x: 0, y: 0 };
                            const point = MotionPathPlugin.convertCoordinates(parent, project, projectCoord);
                            const noiseX = 0; //gsap.utils.random(-10, 10);
                            const noiseY = 0; //gsap.utils.random(-300, 300);
                            const noiseCurve = gsap.utils.random(3, 9);
                            return { x: -point.x + noiseX, y: -point.y + noiseY, curviness: noiseCurve };
                        }),
                    ],
                },
                ease: 'none',
            });
        }

        cell.addEventListener('mouseenter', () => {
            gsap.to(cell, {
                opacity: 0.1,
                duration: 0.3,
                ease: 'power2.out',
            });
        });
        cell.addEventListener('mouseleave', () => {
            gsap.to(cell, {
                opacity: 1,
                duration: 3.3,
                ease: 'power2.out',
            });
        });
    });
</script>
<div class="mosaiq-logo">
    {
        logo.split('\n').map((row, y) => (
            <div class="row">
                {row.split('').map((char, x) => {
                    const color = colors[char as keyof typeof colors] || colors.t;
                    return (
                        <div class="cell-container">
                            <div
                                class="cell"
                                style={`background-color: ${color};`}
                            />
                        </div>
                    );
                })}
            </div>
        ))
    }
</div>
<style>
    .mosaiq-logo {
        display: flex;
        gap: 0;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .row {
        display: flex;
        gap: 0;
    }
    .cell {
        width: 5vh;
        height: 5vh;
        opacity: 0.95;
    }
</style>
