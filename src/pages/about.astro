---
import SectionHeaderTitle from '../components/SectionHeaderTitle.astro';
import Square from '../components/Square.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import SectionLayout from '../layouts/SectionLayout.astro';

const team = [
    {
        name: 'Matt Hagger',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2024-10-05',
    },
    {
        name: 'Javier Moncada',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2024-10-07',
    },
    {
        name: 'Thinh Pham',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2024-10-08',
    },
    {
        name: 'Zach Szeto',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2024-11-08',
    },
    {
        name: 'Sohrob Yaghouti',
        role: 'Product Manager',
        img: '/assets/headshots/winnie.jpg',
        since: '2024-11-21',
    },
    {
        name: 'Sam Randa',
        role: 'Web Platform Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2025-03-19',
    },
    {
        name: 'Zoe Fisk',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2025-03-21',
    },
    {
        name: 'Alex Santagata',
        role: 'Software Engineer',
        img: '/assets/headshots/winnie.jpg',
        since: '2025-06-06',
    },
    {
        name: 'Robin Idk your last name',
        role: 'Hangs out',
        img: '/assets/headshots/winnie.jpg',
        since: '2025-09-23',
    },
].sort((a, b) => new Date(b.since).getTime() - new Date(a.since).getTime());
---

<BaseLayout title="Mosaiq Software">
    <SectionLayout id="about">
        <>
            <Square
                width={10}
                size={800}
                color="var(--mosaiq-navy)"
                top="400px"
                left="10%"
                rotation="80deg"
            />
            <Square
                width={10}
                size={300}
                color="var(--mosaiq-magenta)"
                top="100px"
                right="10%"
                rotation="100deg"
            />
            <Square
                width={10}
                size={500}
                color="var(--mosaiq-blue)"
                top="900px"
                right="20%"
                rotation="35deg"
            />
        </>
        <div class="info">
            <SectionHeaderTitle>What?</SectionHeaderTitle>
            <div class="bubbles">
                <div
                    class="text-bubble"
                    style="margin-left:25%;"
                >
                    <h2>We're Mosaiq Software!</h2>
                </div>
                <div
                    class="text-bubble"
                    style="margin-left:20%;"
                >
                    <p>A team of passionate developers and designers with a bizarre love for building digital tchotchkes.</p>
                    <p>We craft delightful web experiences that blend creativity and technology.</p>
                    <p>Our mission? To turn ideas into stunning realities, one pixel at a time.</p>
                </div>
                <div
                    class="text-bubble"
                    style="margin-left:40%;"
                >
                    <p>Want to join us on this journey?</p>
                    <p>Check out how you can <a href="/join">get involved</a>!</p>
                </div>
                <div
                    class="text-bubble"
                    style="margin-left:30%;"
                >
                    <p>Have an idea for what we should build next? We'd love to hear from you!</p>
                    <p>
                        Reach out to us at <a
                            href="mailto:hello@mosaiq.com"
                            target="_blank"
                            >hello@mosaiq.com</a
                        >
                    </p>
                </div>
            </div>
        </div>
        <div class="members">
            <SectionHeaderTitle>Who?</SectionHeaderTitle>
            <div class="headshot-wheel">
                <div class="circle"></div>
                {
                    team.map((member, i) => (
                        <div class="headshot-wrapper">
                            <div class="headshot-inner">
                                <img
                                    src={member.img}
                                    aria-hidden="true"
                                    class="headshot"
                                    draggable="false"
                                />
                            </div>
                            <p>{member.name}</p>
                            <p>{member.role}</p>
                        </div>
                    ))
                }
            </div>
        </div>
        <div class="timeline">
            <div class="backdrop"></div>
            <SectionHeaderTitle>How?</SectionHeaderTitle>
            <p
                class="text-bubble"
                style="margin-left: 20%"
            >
                More info about our process or past projects..
            </p>
        </div>
    </SectionLayout>
</BaseLayout>
<script>
    import gsap from 'gsap';
    import ScrollTrigger from 'gsap/ScrollTrigger';
    import { MotionPathPlugin } from 'gsap/MotionPathPlugin';
    import SplitText from 'gsap/SplitText';
    gsap.registerPlugin(ScrollTrigger, MotionPathPlugin, SplitText);

    if (ScrollTrigger.isTouch === 1) {
        ScrollTrigger.normalizeScroll({
            allowNestedScroll: true,
            type: 'touch,wheel,pointer',
        });
    }

    document.fonts.ready.then(() => {
        const splitText = new SplitText('.bubbles', {
            type: 'lines,words,chars',
            wordsClass: 'text-bubble-word',
        });
        gsap.from(splitText.words, {
            opacity: 0,
            y: 20,
            rotationX: 90,
            transformOrigin: '0% 50% -50',
            stagger: 0.02,
            ease: 'back.out(1.7)',
            duration: 1,
            scrollTrigger: {
                trigger: '.bubbles',
                start: 'top 80%',
            },
        });

        const textBubbles = document.querySelectorAll('.text-bubble') as NodeListOf<HTMLDivElement>;
        const textRotMax = 5;
        textBubbles.forEach((bubble) => {
            document.addEventListener('mousemove', (e) => {
                const rect = bubble.getBoundingClientRect();
                const x = (e.clientX - rect.left) / rect.width - 0.5;
                const y = (e.clientY - rect.top) / rect.height - 0.5;
                gsap.to(bubble, {
                    rotationY: gsap.utils.clamp(-textRotMax, textRotMax, x * 10),
                    rotationX: gsap.utils.clamp(-textRotMax, textRotMax, -y * 20),
                    transformPerspective: 500,
                    transformOrigin: 'center',
                    ease: 'sine.out',
                    overwrite: 'auto',
                });
            });
        });
    });

    const headshotWrappers = document.querySelectorAll('.headshot-wrapper') as NodeListOf<HTMLDivElement>;
    const headshotWheel = document.querySelector('.headshot-wheel') as HTMLDivElement;

    const wheelCenter = {
        x: headshotWheel.clientWidth / 2,
        y: headshotWheel.clientHeight / 2,
    };

    // size and position the circle
    const radius = headshotWheel.clientWidth;
    const circle = headshotWheel.querySelector('.circle') as HTMLDivElement;
    circle.style.width = `${radius * 2}px`;
    circle.style.height = `${radius * 2}px`;
    circle.style.top = `${wheelCenter.y - radius}px`;
    circle.style.left = `${wheelCenter.x - radius}px`;

    // spread the headshots evenly around the circle
    const degreesPerHeadshot = 30;
    const totalScrollDegrees = degreesPerHeadshot * headshotWrappers.length;
    const degreesOffset = 270 - degreesPerHeadshot * headshotWrappers.length;

    headshotWrappers.forEach((wrapper, index) => {
        // position the headshot around the circle
        const angleDeg = degreesPerHeadshot * (index + 1) + degreesOffset;
        const angle = (angleDeg * Math.PI) / 180;
        const x = wheelCenter.x + radius * Math.cos(angle) - wrapper.clientWidth / 2;
        const y = wheelCenter.y + radius * Math.sin(angle) - wrapper.clientHeight / 2;
        wrapper.style.transform = `translate(${x}px, ${y}px)`;

        // rotate the headshot to face outward
        const rotation = (angle * 180) / Math.PI + 90;
        wrapper.style.transform += ` rotate(${rotation}deg)`;

        // floaty animation
        const inner = wrapper.querySelector('.headshot-inner') as HTMLDivElement;
        const floatDistance = 10;
        const pathLength = 10;
        const def = { x: 0, y: 0, rotationZ: 0 };
        let path = Array.from({ length: pathLength }, (_, i) => {
            return {
                x: (Math.random() * 2 - 1) * floatDistance,
                y: (Math.random() * 2 - 1) * floatDistance,
                rotationZ: (Math.random() * 2 - 1) * 3,
            };
        });
        path = [def, ...path, def]; // close the loop
        gsap.to(inner, {
            motionPath: {
                path,
            },
            duration: 20,
            repeat: -1,
            yoyo: true,
            ease: 'sine.inOut',
        });
        ScrollTrigger.create({
            trigger: inner,
            start: 'top bottom',
            end: 'bottom top',
            onUpdate(self) {
                const skew = gsap.utils.clamp(-10, 10, self.getVelocity() / 100);
                gsap.to(inner, {
                    skewY: skew,
                    ease: 'sine.out',
                });
            },
        });
    });

    ScrollTrigger.create({
        trigger: '.members',
        start: 'top top',
        end: '3000px top',
        pin: true,
        pinSpacing: true,
        anticipatePin: 1,
        scrub: true,
        onUpdate(self) {
            const rotation = self.progress * totalScrollDegrees;
            gsap.to(headshotWheel, {
                rotation,
                ease: 'none',
                overwrite: 'auto',
            });
        },
    });
</script>
<style>
    .info {
        display: flex;
        flex-direction: column;
        gap: 2rem;

        /* remove margin-left from text bubbles on mobile */
        @media screen and (max-width: 768px) {
            .text-bubble {
                margin-left: 0 !important;
            }
        }
        .bubbles {
            background-color: var(--color-background);
            display: flex;
            flex-direction: column;
            gap: 2rem;
            align-items: flex-start;
            justify-content: center;
            padding: 2rem 0;

            .text-bubble {
                padding: 1rem 2rem;
                width: fit-content;
                font-size: var(--font-size-lg);

                a {
                    color: var(--mosaiq-blue);
                    text-decoration: none;

                    &:hover {
                        text-decoration: underline;
                    }
                }
            }
        }
    }

    .members {
        width: 100%;
        position: relative;
        user-select: none !important;
        min-height: 100vh;
        overflow-y: clip;

        .headshot-wheel {
            position: absolute;
            top: 900px;
            left: calc(-500px + 50%);
            width: 1000px;
            height: 1000px;
            user-select: none;

            .circle {
                position: absolute;
                border-radius: 50000px;
                border: double 0.5em transparent;
                background-image: linear-gradient(var(--color-background), var(--color-background)), linear-gradient(to right, var(--mosaiq-blue), var(--mosaiq-pink));
                background-origin: border-box;
                background-clip: content-box, border-box;
                pointer-events: none;
            }

            .headshot-wrapper {
                position: absolute;
                width: 300px;
                height: 500px;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                gap: 1rem;

                p {
                    font-size: var(--font-size-md);
                    color: var(--color-text);
                    text-align: center;
                    user-select: auto;
                }

                .headshot {
                    width: 100%;
                    height: 300px;
                    object-fit: cover;
                    user-select: none;
                }
            }
        }
    }

    .timeline {
        min-height: 100vh;
        z-index: 1;

        position: relative;

        .backdrop {
            position: absolute;
            top: 0;
            left: -50vw;
            width: 200vw;
            height: 100%;
            background-color: var(--color-background);
            z-index: -1;
        }
    }
</style>
